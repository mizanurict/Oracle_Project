---Employee Basic Information Table---

CREATE TABLE emp_information (
    employee_id NUMBER GENERATED BY DEFAULT AS IDENTITY, -- Auto-generated Employee ID
    full_name VARCHAR2(100),
    date_of_birth DATE,
    gender VARCHAR2(10),
    national_id VARCHAR2(20),
    phone_number VARCHAR2(15),
    email VARCHAR2(100),
    address VARCHAR2(255),
    department VARCHAR2(50),
    designation VARCHAR2(50),
    joining_date DATE,
    supervisor_id NUMBER, -- Foreign Key for Manager/Supervisor
    PRIMARY KEY (employee_id)
);

CREATE SEQUENCE emp_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_auto_emp_id
BEFORE INSERT ON emp_information
FOR EACH ROW
BEGIN
    :NEW.employee_id := emp_id_seq.NEXTVAL;
END;

---Employee Attendance---

CREATE TABLE emp_attendance (
    attendance_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    employee_id NUMBER,
    attendance_date DATE,
    time_in TIMESTAMP,
    time_out TIMESTAMP,
    overtime_hours NUMBER,
    absence_reason VARCHAR2(100),
    PRIMARY KEY (attendance_id),
    FOREIGN KEY (employee_id) REFERENCES emp_information(employee_id)
);


CREATE OR REPLACE TRIGGER trg_auto_overtime
BEFORE INSERT OR UPDATE ON emp_attendance
FOR EACH ROW
BEGIN
    IF :NEW.time_in IS NOT NULL AND :NEW.time_out IS NOT NULL THEN
        :NEW.overtime_hours := EXTRACT(HOUR FROM ( :NEW.time_out - :NEW.time_in )) - 8;
        IF :NEW.overtime_hours < 0 THEN
            :NEW.overtime_hours := 0;
        END IF;
    END IF;
END;

-------- Employee leave ------------

CREATE TABLE emp_leave (
    leave_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    employee_id NUMBER,
    leave_type VARCHAR2(50),
    start_date DATE,
    end_date DATE,
    reason VARCHAR2(255),
    approval_status VARCHAR2(20),
    PRIMARY KEY (leave_id),
    FOREIGN KEY (employee_id) REFERENCES emp_information(employee_id)
);

CREATE OR REPLACE PROCEDURE auto_approve_leave(p_leave_id IN NUMBER) IS v_days NUMBER;
BEGIN
    -- Calculate the number of days for the leave
    SELECT end_date - start_date INTO v_days
    FROM emp_leave
    WHERE leave_id = p_leave_id;
    
    -- Automatically approve if the leave duration is less than or equal to 5 days
    IF v_days <= 5 THEN
        UPDATE emp_leave
        SET approval_status = 'Approved'
        WHERE leave_id = p_leave_id;
    ELSE
        UPDATE emp_leave
        SET approval_status = 'Pending'
        WHERE leave_id = p_leave_id;
    END IF;
END;

----------- Employee Payroll --------------

CREATE TABLE emp_payroll (
    payroll_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    employee_id NUMBER,
    basic_salary NUMBER(10, 2),
    bonus NUMBER(10, 2),
    deductions NUMBER(10, 2),
    net_salary NUMBER(10, 2),
    payment_date DATE,
    PRIMARY KEY (payroll_id),
    FOREIGN KEY (employee_id) REFERENCES emp_information(employee_id)
);

CREATE OR REPLACE PROCEDURE calculate_net_salary(p_payroll_id IN NUMBER) IS
    v_basic_salary emp_payroll.basic_salary%TYPE;
    v_bonus emp_payroll.bonus%TYPE;
    v_deductions emp_payroll.deductions%TYPE;
    v_net_salary emp_payroll.net_salary%TYPE;
BEGIN
    -- Fetch basic salary, bonus, and deductions
    SELECT basic_salary, bonus, deductions INTO v_basic_salary, v_bonus, v_deductions
    FROM emp_payroll
    WHERE payroll_id = p_payroll_id;
    
    -- Calculate net salary
    v_net_salary := v_basic_salary + v_bonus - v_deductions;
    
    -- Update net salary in the table
    UPDATE emp_payroll
    SET net_salary = v_net_salary
    WHERE payroll_id = p_payroll_id;
END;


CREATE TABLE emp_performance (
    performance_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    employee_id NUMBER,
    review_period VARCHAR2(50),
    performance_rating NUMBER(1),
    promotion_status VARCHAR2(50),
    PRIMARY KEY (performance_id),
    FOREIGN KEY (employee_id) REFERENCES emp_information(employee_id)
);